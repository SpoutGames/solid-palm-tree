<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playeridle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///creation code
    //center camera
        if (instance_exists(obj_main))
        {
            obj_main.x = x
            obj_main.y = y
        }

    //movement
        //old
            attacking = 0
            hsp_carry = 0
            movement = 0
            moveframe = 0
            climb = 0
            vsp = 0
            jspd = -6
            gravy = .5
            jl_max = global.jl_max
            jl = jl_max
            xadd = 1
            next = 0
            dir = 0
            dash = 0
            dash_reset = 0
        //new
            directionFacing = 0
            flatXSpeed = 0
            speedIncreaseBuffer = 0
            ySpeedIncreaseBuffer = 0
            speedInXDirection = 0
            speedInYDirection = 0
            ledgeToGrab = false
            wallWorkingWith = 0
            ledgePullStart = false 
            requestToPullUp = false
            playerClimb = false
            wallKickLeft = false
            wallKickRight = false
            onGround = 0

    //spawn determine
        camera_xmove = 0
        camera_ymove = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize
    //variables
        //keyboard + controller
            keyLeft = -(keyboard_check(global.key_left) || gamepad_button_check(0,global.ckey_left))
            keyRight = (keyboard_check(global.key_right) || gamepad_button_check(0,global.ckey_right))
            keyDown = (keyboard_check(global.key_down) || gamepad_button_check(0,global.ckey_down))
            keyUp = (keyboard_check(global.key_up) || gamepad_button_check(0,global.ckey_up))
            keyJump = (keyboard_check_pressed(global.key_jump) || gamepad_button_check_pressed(0,global.ckey_jump))
            keyJumpHeld = (keyboard_check(global.key_jump) || gamepad_button_check(0,global.ckey_jump))
            keyShift = (keyboard_check_pressed(global.key_shift) || gamepad_button_check(0,global.ckey_shift))
        onGround = place_meeting(x,y+1,obj_wall)
        on_platform = place_meeting(x,y+1,obj_platform)
        on_moving_platform = place_meeting(x,y+2,obj_moving_platform)
        wallLeft = place_meeting(x-1,y,obj_wall)
        wallRight = place_meeting(x+1,y,obj_wall)
        jl_max = global.jl_max
        touchingNPC = (place_meeting(x,y,obj_aria) || place_meeting(x,y,obj_hudgin) || place_meeting(x,y,obj_ilya))

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement
    //set up
        directionFacing = keyLeft + keyRight;
        if (global.pause == 0){
            //horizontal movement
                if (place_meeting(x+1,y,obj_wall) || place_meeting(x-1,y,obj_wall)){ //check to see if touching a wall
                    if (place_meeting(x,y+1,obj_wall)){ //is touching wall and on ground
                        if (directionFacing != 0) {
                            if (flatXSpeed &lt; 4) {
                                if (speedIncreaseBuffer &lt; 2){
                                    speedIncreaseBuffer += 1;
                                }
                                if (speedIncreaseBuffer &gt;= 2){
                                    flatXSpeed += 1;
                                    speedIncreaseBuffer = 0;
                                }
                            }
                            speedInXDirection = flatXSpeed * directionFacing
                        } else {
                            speedInXDirection = 0
                            flatXSpeed = 0
                            speedIncreaseBuffer = 0
                        }
                    } else { //is touching a wall and not on ground
                        //ledge Grabs
                            if (wallWorkingWith != false) { //check to see if a wall that can be grabbed is found
                                if (!ledgePullStart){
                                    if (wallWorkingWith.y &lt; y+4){
                                        if (wallWorkingWith.y &gt; y-4){
                                            ledgeToGrab = true
                                        } else {
                                            ledgeToGrab = false
                                            wallWorkingWith = false
                                        }
                                    } else {
                                        ledgeToGrab = false
                                        wallWorkingWith = false
                                    }
                                }
                            }
                        //wall kicks
                            if (place_meeting(x-1,y,obj_wall)) {
                                if (keyRight) {
                                    wallKickRight = true
                                    ledgeToGrab = false;
                                }
                            }
                            if (place_meeting(x+1,y,obj_wall)) {
                                if ((keyboard_check(global.key_left) || gamepad_button_check(0,global.ckey_left))) {
                                    wallKickLeft = true
                                    ledgeToGrab = false;
                                }
                            }
                            if (wallKickLeft) {
                                speedInXDirection = -4 
                                speedInYDirection = -6
                                wallKickLeft = false
                            }
                            if (wallKickRight) {
                                speedInXDirection = 4
                                speedInYDirection = -6
                                wallKickRight = false
                            }
                    }
                } else { //is not touching a wall
                    if (place_meeting(x,y+1,obj_wall)) { // is not touching a wall and on ground
                        if (directionFacing != 0) {
                            if (flatXSpeed &lt; 4) {
                                if (speedIncreaseBuffer &lt; 2){
                                    speedIncreaseBuffer += 1;
                                }
                                if (speedIncreaseBuffer &gt;= 2){
                                    flatXSpeed += 1;
                                    speedIncreaseBuffer = 0;
                                }
                            }
                            speedInXDirection = flatXSpeed * directionFacing
                        } else {
                            speedInXDirection = 0
                            flatXSpeed = 0 
                            speedIncreaseBuffer = 0
                        }
                    } else { //is not touching a wall and not on ground
                        ledgeToGrab = false
                        ledgePullStart = false
                        wallWorkingWith = false
                        requestToPullUp = false;
                    }
                }
            //vertical movement
                if (place_meeting(x,y+1,obj_wall)) { //is on the ground
                    requestToPullUp = false;
                    if (keyJump){
                        speedInYDirection = -6;
                    }
                } else { //is not on the ground
                    if (speedInYDirection &lt; 0) &amp;&amp; (!keyJumpHeld) {  //varry jump height
                        speedInYDirection = max(speedInYDirection,-4);
                    }
                    if (place_meeting(x+1,y,obj_wall) || place_meeting(x-1,y,obj_wall)) { //touching a wall and not on ground
                            if (speedInYDirection &lt; 6) {
                                if (ySpeedIncreaseBuffer &lt; 2) {
                                    ySpeedIncreaseBuffer += 1;
                                }
                                if (ySpeedIncreaseBuffer &gt;= 2) {
                                    speedInYDirection += 1;
                                    ySpeedIncreaseBuffer = 0;
                                }
                            }   
                            else if (speedInYDirection &gt; 3) {
                                speedInYDirection -= 1;
                            }
                            if (ledgeToGrab) { //touching a wall that can be grabbed
                                if (ledgePullStart) //y is = to id.wall.y
                                {
                                    if (keyUp) {
                                        requestToPullUp = true;
                                    }
                                    if (requestToPullUp) {
                                        speedInYDirection = -2
                                    }
                                    if (keyDown){
                                        ledgeToGrab = false
                                        wallWorkingWith = 0
                                        speedInYDirection = 0
                                    }
                                }
                            } else {
                                requestToPullUp = false;
                            }
                        } else { //not touching a wall and not on ground
                            if (speedInYDirection &lt; 12) {
                                if (ySpeedIncreaseBuffer &lt; 2) {
                                    ySpeedIncreaseBuffer += 1
                                }
                                if (ySpeedIncreaseBuffer &gt;= 2) {
                                    speedInYDirection += 1;
                                    ySpeedIncreaseBuffer = 0;
                                }
                            }
                        }
                        
                        if (place_meeting(x,y,obj_climbable)) { //climbable objects
                            if (keyUp) {
                                playerClimb = true
                            }
                        } else {
                            playerClimb = false
                        }
                        if (playerClimb){
                            if (!keyUp &amp;&amp; !keyDown) {
                                speedInYDirection = 0
                            }
                            if (keyUp){
                                speedInYDirection = -2
                            }
                            if (keyDown) {
                                speedInYDirection = 2
                            }
                            
                        }               
                    }
                }
        
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///collision
    if (global.pause == 0) {
        //horizontal detection
            if (!place_meeting(x+speedInXDirection,y,obj_wall)){
                x += speedInXDirection;
            }
            else {
                while (!place_meeting(x+sign(speedInXDirection),y,obj_wall)){
                    x += sign(speedInXDirection);
                }
                flatXSpeed = 0;
                speedInXDirection = 0;
                wallKickLeft = false;
                wallKickRight = false;
            }
        //vertical collision
            if (!ledgeToGrab){
                if (!place_meeting(x,y+speedInYDirection,obj_wall)){
                    y += speedInYDirection
                } else {
                    while (!place_meeting(x,y+sign(speedInYDirection),obj_wall)){
                        y += sign(speedInYDirection)
                    }
                    speedInYDirection = 0;
                }
            } else {
                if (!ledgePullStart) {
                    if (y+speedInYDirection &lt; wallWorkingWith.y) {
                        y += speedInYDirection
                    } else {
                        while (y != wallWorkingWith.y) {
                            y = wallWorkingWith.y
                        }
                        speedInYDirection = 0
                        ledgePullStart = true
                    }
                }
                if (requestToPullUp) {
                    speedInYDirection = -2
                    if (y+sprite_height+speedInYDirection &gt; wallWorkingWith.y-1){
                        y += speedInYDirection
                    } else {
                        while (y+sprite_height+sign(speedInYDirection) &gt; wallWorkingWith.y-1) {
                            y = wallWorkingWith.y+sprite_height
                            x += 1
                        }
                        
                    }
                }
            }
        }


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///camera
    obj_main.x = x
    obj_main.y = y-10
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///all player animation
draw_self();
image_speed = .25;
if (!ledgeToGrab) {
    if (directionFacing != 0){
        image_xscale = directionFacing;
    }
}
    //Basic movement
        if (onGround){
            if (directionFacing != 0){
                sprite_index = spr_playerrun;
            }
            else{
                sprite_index = spr_playeridle;
            }
        }
        else {
            if (!place_meeting(x+1,y,obj_wall) &amp;&amp; !place_meeting(x-1,y,obj_wall)){
                sprite_index = spr_playerjump
            } else {
                sprite_index = spr_playeridle
            }
        }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
