<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_slime</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///creation code
    grav = .5
    hsp = 0
    vsp = 0
    jTime = 0
    hsp_sign = 0
    spd = 0
    timeToJump = 30
    slime_canMove = 1 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//intitialize
    on_ground = place_meeting(x,y+2,obj_wall)
    hit = place_meeting(x,y,obj_fist) || place_meeting(x,y,obj_hitboxSword1)
    player = place_meeting(x,y,obj_player)
    
//dmg's
    //dmg'ed by player
        if (hit)
        {
            instance_destroy()
        }
    //dmg to player
        if (player)
        {
            timeToJump = obj_main.slimeJumpTime
            if (obj_main.player_IFrame = 0)
            {
                obj_main.player_IFrameDir = sign(x-obj_player.x)
                obj_main.player_setI = 1
                obj_main.player_slimeDmgTaken = 1
            }
        }

//move
    if (global.pause = 0)
    {
    //main block
        if (object_exists(obj_player))
        {
            if (distance_to_object(obj_player) &lt; 100)
            {
                if (on_ground)
                {
                    spd = 0
                    if (jTime &lt; timeToJump)
                    {   
                        jTime += 1  
                    }
                    if (jTime = timeToJump)
                    {
                        vsp = -3
                        jTime = 0
                        timeToJump = 30
                    }
                    if (obj_player.x &gt; x)
                    {
                        if (slime_canMove = 1)
                        {
                            hsp_sign = 1
                        }
                        else
                        {
                            hsp_sign = 0
                        }
                    }
                    if (obj_player.x &lt; x)
                    {
                        if (slime_canMove = 1)
                        {
                            hsp_sign = -1
                        }
                        else
                        {
                            hsp_sign = 0
                        }
                    }
                }
                else
                {
                    spd = 4
                    vsp += grav
                }
                
            }
        }
        
    //final calculations
        if (slime_canMove = 1)
        {
            hsp = spd * hsp_sign
        }
        else 
        {
            hsp = 0
        }
        
        if (place_meeting(x,y,obj_player))
        {
            hsp = 0
            slime_canMove = 0
        }
        if (obj_main.player_dmgTaken &lt;= 0)
        {
            slime_canMove = 1
        }
        
    //collisions
        if (!place_meeting(x+hsp,y,obj_wall))
        {
            x += hsp
        }   
        if (place_meeting(x+hsp,y,obj_wall))
        {
            while (!place_meeting(x+sign(hsp),y,obj_wall))
            {
                x += sign(hsp)
            }
            hsp = 0
        }
        if (!place_meeting(x,y+vsp,obj_wall))
        {
            y += vsp
        }
        if (place_meeting(x,y+vsp,obj_wall))
        {
            while(!place_meeting(x,y+sign(vsp),obj_wall))
            {
                y += sign(vsp)
            }
            vsp = 0
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
