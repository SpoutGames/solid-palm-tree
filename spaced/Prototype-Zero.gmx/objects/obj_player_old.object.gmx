<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize
//movement
frame = 0 
momentum = 0
momentum2 = 0
hsp = 0
vsp = 0
dir = 0
jspd = -7
gravy = .5
ground_slow = 0
released = 0
yplus = 0
hsp_carry = 0
hsp_fnl = 0
jumps_left = 0
jumps_left_max = global.jumps_left_max
wall_jump = 0
wall_jumps_left = 0
wall_jumps_left_max = 0
climb = 0
time = 1
vsp_fnl = 0
energy = global.energy_max
dash = 0
timeout = 0
dash_timeout = 0
dash_can = 1
air_frame = 0
hsp_subtract = 1
momentum_subtract = 1
momentum_add = 1

//camera
camera_xmove = 0
camera_ymove = 0
camera_xlock = 0
camera_ylock = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///main
/*
comments:
-none
*/
//inputs
pause = global.pause
key_up = keyboard_check(global.key_up)
key_down = keyboard_check(global.key_down)
key_left = -keyboard_check(global.key_left)
key_left_release = keyboard_check_released(global.key_left)
key_right = keyboard_check(global.key_right)
key_right_release = keyboard_check_released(global.key_right)
key_jump = keyboard_check_pressed(global.key_confirm)
key_jump_held = keyboard_check(global.key_confirm)
dir = key_left + key_right
on_ground = (place_meeting(x,y+1,obj_wall) || place_meeting(x,y+1,obj_platform) || place_meeting(x,y+1,obj_moving_platform))
on_platform = (place_meeting(x,y+1,obj_platform))
on_moving_platform = (place_meeting(x,y+1,obj_moving_platform))
wall_left = place_meeting(x-1,y,obj_wall)
wall_right = place_meeting(x+1,y,obj_wall)
touching_wall = wall_left || wall_right
time_increase = keyboard_check(global.key_time_up)
time_decrease = keyboard_check(global.key_time_down)
time_max_slow = global.time_max_slow
time_max_fast = global.time_max_fast
energy_max = global.energy_max
energy_recharge = global.energy_recharge
dash_energy = global.dash_energy
key_dash = global.key_dash
max_momentum = global.max_momentum

//setup
//camera
camera_x = 1
camera_y = 1
camera_xlock = 0
camera_ylock = 0
//movement
hsp_subtract = 1
momentum_subtract = 1
momentum_add = 1


//camera control
if (!instance_exists(obj_camera))
{
    instance_create(x,y,obj_camera)
}
//image related set up
if (dir != 0)
{
    if (global.pause = 0)
    {
        image_xscale = dir
    }
    if (abs(momentum) &gt; 0)
    {
        if (abs(momentum) &lt; max_momentum/2)
        {
            image_speed = .1
        }
        else
        {
            image_speed = .2
        }
    }
}

//checks if button was released before pause
if (key_left_release || key_right_release)
{
    released = 1
}
//checks to see if game is paused
if (pause = 0)
{
    //final time calculation
    time = clamp(time,time_max_slow,time_max_fast)
    global.time = time
    //movement
    //horizontal movement
    //basic left and right
    if (key_left_release || key_right_release)
    {
        momentum = 0
    }
    if (dir != 0)
    {
        frame += 1
        if (frame &gt; 2)
        {
            if (momentum &lt; 5)
            {
                momentum += 1
                frame = 0
            }
        }
    }
    //stopping
    if (dir = 0)
    {
        if (momentum &gt; 0)
        {
            frame += 1
            if (frame &gt; 2)
            {
                momentum -= 1
                frame = 0
            }
        }
    }
    //wall jump
    if (!on_ground)
    {
        if (key_jump)
        {
            if (wall_left)
            {
                hsp = 5
                momentum = 0
            }
            if (wall_right)
            {
                hsp = -5
                momentum = 0
            }
        }
    }
    //hsp calculation
        hsp = dir * momentum   
    //final horizontal calculations
    hsp_fnl = hsp + hsp_carry
    hsp_carry = 0
    
    //vertical
    if (on_ground)
    {
        jumps_left = jumps_left_max
        if(global.multiple_jump = 0)
        {
            if (key_jump)
            {
                vsp = jspd
            }
        }
    }
    if (key_jump)
    {
        if (jumps_left != 0)
        {
            if (global.wall_jump = 1)
            {
                if (!wall_left &amp;&amp; !wall_right)
                {
                    if (global.multiple_jump = 1)
                    {
                        jumps_left -= 1
                        vsp = jspd
                    }
                }
            }
            if (global.wall_jump = 0)
            {
                if (global.multiple_jump = 1)
                {
                    jumps_left -= 1
                    vsp = jspd
                }
            }
        }
        if (global.wall_jump = 1)
        {
            if (wall_left || wall_right)
            {
                vsp = jspd
            }
        }
    }
    //Gravity effects
    if (!on_ground)
    {
        if (vsp &lt;= 9)
        {
            vsp = vsp + gravy*time
        }
    }
    
    //varying jump height
    if (vsp &lt; 0)
    {
        if (!key_jump_held)
        {
            vsp = max(vsp,jspd/3)
        }
    }
    
    //climbing
    if (climb = 0)
    {
        if (place_meeting(x,y,obj_climbable))
        {
            if (key_up)
            {
                climb = 1
            }
        }
    }
    if (climb = 1)
    {
        vsp = 0
        hsp_fnl = 0
        hsp = 0
        momentum = 0
        frame = 0 
        dash = 0
        if (key_up)
        {
            vsp = -2
        }
        if (key_down)
        {
            vsp = 2
        }
        if (dir = -1)
        {
            hsp_fnl = -2
        }
        if (dir = 1)
        {
            hsp_fnl = 2
        }
        if (!place_meeting(x,y,obj_climbable) || (key_jump))
        {
            climb = 0
        }
    }
    //final vertical calculation
    vsp_fnl = vsp*time
    //collision
    //horizontal
    if (!place_meeting(x+hsp_fnl,y,obj_wall))
    {
        x = x + hsp_fnl
    }
    if (place_meeting(x+hsp_fnl,y,obj_wall))
    {
        yplus = 0
        if (on_ground)
        {
            while ((place_meeting(x+hsp,y-yplus,obj_wall)) &amp;&amp; (yplus &lt;= 6))
            {
                yplus += 1
            }
        }
        if (place_meeting(x+hsp_fnl,y-yplus,obj_wall))
        {
            while (!place_meeting(x+sign(hsp_fnl),y,obj_wall))
            {
                x = x + sign(hsp_fnl)
            }
            hsp_fnl = 0
            momentum = 0
            frame = 0
            hsp = 0
            air_move = 0
        }
        else
        {
            y = y - yplus
        }
    }
    //vertical
    if (!place_meeting(x,y+vsp_fnl,obj_wall))
    {
        y = y + vsp_fnl
    }
    if (place_meeting(x,y+vsp_fnl,obj_wall))
    {
        while (!place_meeting(x,y+sign(vsp_fnl),obj_wall))
        {
            y = y + sign(vsp_fnl)
        }
        camera_y = 0
        vsp_fnl = 0
        vsp = 0
    } 
    
    //camera control
    //horizontal
    if (abs(obj_camera.x - x) &gt;= 30)
    {
        if (hsp_fnl != 0)
        {
            camera_xmove = hsp_fnl
        }
        else
        {
            //camera on right side
            if ((obj_camera.x - x) &gt; 0)
            {
                camera_xmove = -3
            }
            //camera on left side
            if ((obj_camera.x - x) &lt; 0)
            {
                camera_xmove = 3
            }
        }
    }
    if (abs(obj_camera.x - x) &lt; 30)
    {
        //camera on right side
        if ((obj_camera.x - x) &gt; 0)
        {
            if (on_ground &amp;&amp; !key_down &amp;&amp; !on_moving_platform)
            {
                if (abs(obj_camera.x - x) &gt;= 4)
                {
                    camera_xmove = -3
                }
                else
                {
                    camera_xmove = 0
                }
            }
            else
            {
                if (abs(obj_camera.x - x) &gt;= 4)
                {
                    camera_xmove = -1
                }
                else
                {
                    camera_xmove = 0
                }
            }
        }
        //camera on left side
        if ((obj_camera.x - x) &lt; 0)
        {
            if (on_ground &amp;&amp; !key_down &amp;&amp; !on_moving_platform)
            {
                if (abs(obj_camera.x - x) &gt;= 4)
                {
                    camera_xmove = 3
                }
                else
                {
                    camera_xmove = 0
                }
            }
            else
            {
                if (abs(obj_camera.x - x) &gt;= 4)
                {
                    camera_xmove = 1
                }
                else
                {
                    camera_xmove = 0
                }
            }
        }
    }
    //vertical
    if (abs(obj_camera.y - y) &gt; 30)
    {
        if (!key_down || !key_up)
        {
            if (vsp != 0)
            {
                camera_ymove = vsp
            }
            else
            {   
                //camera below player
                if ((obj_camera.y - y) &gt; 0)
                {
                    if (abs(obj_camera.y - y) &gt;= 4)
                    {
                        camera_ymove = -3
                    }   
                }
                //camera above player
                if ((obj_camera.y - y) &lt; 0)
                {
                    if (abs(obj_camera.y - y) &gt;= 4)
                    {
                        camera_ymove = 3
                    }
                }
            }
        }
    }
    if (abs(obj_camera.y - y) &lt;= 30)
    {   
        //camera below player
        if ((obj_camera.y - y) &gt; 0)
        {
            if (abs(obj_camera.y - y) &gt;= 4)
            {
                camera_ymove = -3
            }
            else
            {
                camera_ymove = 0
            }
            if (climb = 1)
            {
                camera_ymove = -1
            }
        }
        //camera above player
        if ((obj_camera.y - y) &lt; 0)
        {
            if (abs(obj_camera.y - y) &gt;= 4)
            {
                camera_ymove = 3
            }
            else
            {
                camera_ymove = 0
            }
            if (climb = 1)
            {
                camera_ymove = 1
            }
        }
    }
    //extra vertical movements
    /*
        if player presses up or down here it will scroll camera up or down
    */
    if (abs(obj_camera.x - x) &lt;= 10)
    {
        if (on_ground)
        {
            if ((!key_right) &amp;&amp; (!keyboard_check(global.key_left)))
            {
                if (abs(obj_camera.y - y) &lt; 35)
                {
                    if (key_up)
                    {
                        camera_ymove = -1
                    }
                    if (key_down)
                    {
                        camera_ymove = 1
                    } 
                } 
            } 
        }
    }
    //final movements
    obj_camera.x += camera_xmove
    obj_camera.y += camera_ymove
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animation
draw_self()
image_speed = 0.25

if (global.pause = 0)
{
    if (on_ground)
    {
        if (climb = 0)
        {
            //regular movement and idle animation
            if (dir != 0)
            {
                sprite_index = spr_player_moving
            }
            else
            {
                sprite_index = spr_player_idle
            }
            //player will be attacking
        }
    }
    else
    {
        //jumping animation
        if (climb = 0)
        {
            if (vsp_fnl &lt; 0)
            {
                //jumping animation goes here
                sprite_index = spr_player_jumping
            }
            //falling animation
            else if (vsp_fnl &gt; 0)
            {
                //falling animation goes here
                sprite_index = spr_player_falling
            }
        }
        if (climb = 1)
        {
            sprite_index = spr_player_idle
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
